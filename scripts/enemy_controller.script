go.property("speed", 80)
go.property("distToTarget", 20)
go.property("target", hash("/hero/hero"))

local ATTACK_PERIOD = 1.6

local function playAnim(self, anim_id)
	if self.current_anim == anim_id then return end
	if self.current_anim == hash("die") then return end
	msg.post("#sprite", "play_animation", {id = anim_id})
	self.current_anim = anim_id
end

local function tryAttack(self)
	local time = socket.gettime()
	if time - self.lastAttackTime < ATTACK_PERIOD then
		return
	end

	playAnim(self, hash("attack1"))
	local url = msg.url()
	url.path = self.target
	url.fragment = "property_health"
	msg.post(url, hash("damage"), { damage = 1 })
	self.lastAttackTime = time
end

local function terminate(self, handle, time_elapsed)
	go.delete()
end

function init(self)
	self.correction = vmath.vector3()
	self.current_anim = hash("idle")
	self.dead = false
	self.lastAttackTime = 0
end

function update(self, dt)
	if self.dead then
		return
	end
	
	if self.target == nil then
		playAnim(self, hash("idle"))
		return
	end

	local targetPos = go.get_position(self.target)
	if targetPos == nil then 
		playAnim(self, hash("idle"))
		return
	end

	local pos = go.get_position()
	local d = vmath.length(pos - targetPos)
	local dir = 1
	if pos.x > targetPos.x then dir = -1 end
	sprite.set_hflip("#sprite", pos.x > targetPos.x)
	if d < self.distToTarget then
		tryAttack(self)
	else
		local p = go.get_position()
		p.x = p.x + dir * self.speed * dt
		go.set_position(p)
		playAnim(self, hash("run"))
	end
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	elseif message_id == hash("animation_done") then
		if message.id == hash("die") then
			timer.delay(0.3, false, terminate)
		else
			playAnim(self, hash("idle"))
		end
	elseif message_id == hash("die") then
		self.dead = true
		playAnim(self, hash("die"))
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
