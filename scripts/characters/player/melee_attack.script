go.property("damageDeal", 100)
go.property("attackSpeed", 0.5)

require "modules.common"

local function updateAttackPoint(self, dir)
	local localAttackPoint = vmath.vector3(dir * 12, -3, 0)
	go.set_position(localAttackPoint, "attackTriggerArea")
end

local function process(self, go_id)
	if self.collided_objects[go_id] then return end

	self.collided_objects[go_id] = true
	local url = msg.url()
	url.path = go_id
	url.fragment = "property_health"
	msg.post(url, hash("damage"), { damage = self.damageDeal })
end

local function AllowAttacking(self)
	self.isAttackAllowed = true
	self.timer = timer.INVALID_TIMER_HANDLE
end

local function StartDamage(self)
	self.collided_objects = {}
	msg.post("attackTriggerArea#collisionobject", "enable")
	assert(self.timer == timer.INVALID_TIMER_HANDLE)
	self.isAttackAllowed = false
	self.timer = timer.delay(self.attack_period, false, AllowAttacking)
end

local function StopDamage(self)
	msg.post("attackTriggerArea#collisionobject", "disable")
end

local function RequestAttack(self)
	msg.post(".", msgtype_trigger, { id = trigger_attack } )
end

function init(self)
	self.collided_objects = {}
	self.attack_period = 1 / self.attackSpeed
	self.timer = timer.INVALID_TIMER_HANDLE
	self.isAttackAllowed = true
	msg.post("attackTriggerArea#collisionobject", "disable")

	updateAttackPoint(self, 1)
end

function on_message(self, message_id, message, sender)
	if message_id == msgtype_param and message.id == param_attack_input then
		if message.value and self.isAttackAllowed then
			RequestAttack(self)
		end
	elseif message_id == msgtype_param and message.id == param_move then
		if message.value ~= 0 then
			updateAttackPoint(self, message.value)
		end
	elseif message_id == hash("melee_collision") then
		if message.enter then 
			process(self, message.other_id) 
		end
	elseif message_id == hash("start_damage") then
		StartDamage(self)
	elseif message_id == hash("stop_damage") then
		StopDamage(self)
	end
end